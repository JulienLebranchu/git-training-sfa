---
title: Git & GitHub training
subtitle: SFA team's training
format:
  farquhar-revealjs:
    width: 1600
    height: 900
    toc: true
    toc-depth: 1
    toc-title: Summary
    self-contained: false    
    preview-links: auto
    email-obfuscation: javascript
    highlight-style: github
    chalkboard: 
      boardmarker-width: 3
header-includes: |
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"
        rel="stylesheet"/>
author:
  - name: Julien LEBRANCHU
    orcid: 0000-0002-7759-0534
    email: julien.lebranchu@ird.fr
    institution: IRD/MARBEC/OB7 
date-modified: last-modified
date: 30 01 2024
filters:
  - d2
d2:
  layout: elk
  theme: "NeutralDefault"
  sketch: false
  pad: 0
---

::: hidden

{{< fa thumbs-up >}}

:::

```{r}
#| include: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#447099",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```
# Installation and configuration

## Installation and configuration
### Installing Git [**Windows and Mac**]

- Download and install Git from <https://git-scm.com/downloads>.
- Download and install GitHub Desktop from <https://desktop.github.com>.

## Installation and configuration
### Git configuration: register who your are

When done, open `Git Bash`, type

```Shell
git config --global user.name "Firstname Lastname"
git config --global user.email "email@adress.org"
```

**N.B.** These two lines identify you in the history of a project.

```Shell
git config --global --list
```

## Installation and configuration
### Git configuration with GitHub Desktop: register who your are

#. In the menu bar, select *GitHub Desktop*, then click **Preferences***.
#. In the *Preferences* window, click **Git**.

![](images/github-select-git-pane.png){width="500"}

More details on [Configuring and customizing GitHub Desktop](https://docs.github.com/en/desktop/configuring-and-customizing-github-desktop/configuring-git-for-github-desktop)

# Training on solo project

## `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#2472b5" transition="slide-in"}
:::: {.columns}

::: {.column width="50%"}
- Open `Github Desktop` and create a new repository `training-git`
- Choose a local path
- Click on `Create Repository`
:::

::: {.column width="50%"}
![](images/training-github-desktop-init.png)
:::

::::
```{R}
#| echo: false

countdown_timer(2)
```

## First Commit

- Create a `README.md` file $\rightarrow$ README.md is now in
Workspace but not in Local
- When you type `git status` 

```Shell
$ git status
```

````
Sur la branche main
Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
	README.md

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)
````
<!-- 
```{mermaid}
graph LR
    A[fa:fa-file Workspace] ----> B[Index] ----> C[Local]
``` 
 -->

```{.d2}
direction: right
Workspace: {
  shape: image
  icon: https://icons.terrastruct.com/essentials%2F257-file.svg
}

Workspace -> Index -> Local

``` 

## First Commit

- Type `git add README.md` and `git status`
```Shell
$ git add README.md
```
<!-- 
```{mermaid}
graph LR
    A[Workspace] --  add --> B[fa:fa-file Index] ----> C[Local]  
``` 
-->

```{.d2}
direction: right
Index: {
  shape: image
  icon: https://icons.terrastruct.com/essentials%2F257-file.svg
}

Workspace -> Index : add
Index -> Local

``` 
```Shell
$ git status
```

````
Sur la branche main
Modifications qui seront validées :
  (utilisez "git restore --staged <fichier>..." pour désindexer)
	nouveau fichier : README.md
````

## First Commit

- Type `git commit -m ”First commit”`

<!-- 
```{mermaid}
graph LR
    A[Workspace] ----> B[Index] -- git commit --> C[Local]   
``` 
-->


```{.d2}
direction: right
Local: {
  shape: image
  icon: https://icons.terrastruct.com/essentials%2F257-file.svg
}

Workspace -> Index 
Index -> Local : commit
``` 

```Shell
$ git commit -m "First commit"
```

```
[main fde1cd2] First commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md
```

fde1cd2 is a short version of the identifier of the commit

- Type `git log`

```Shell
$ git log
```

```
commit fde1cd295a8403756d655ec6d1f2be9eb908f649 (HEAD -> main)
Author: Julien Lebranchu <julien.lebranchu@ird.fr>
Date:   Fri Oct 20 14:36:19 2023 +0400

    First commit

commit 25681b3e0212f771a4594abc008d5352436a6244
Author: Julien Lebranchu <julien.lebranchu@ird.fr>
Date:   Fri Oct 20 14:35:11 2023 +0400

    Initial commit
```


## `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#2472b5" transition="slide-in"}

:::: {.columns}

::: {.column width="50%"}
- Create a `README.md` file from your explorer file
- With the GitHub Desktop
  - Add the file 
  - Commit the changes 

- Explore the interface, specialy `history` tab.
:::

::: {.column width="50%"}
![](images/training-github-desktop-add.png)
:::
::::

```{R}
#| echo: false

countdown_timer(5)
```

## `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#2472b5" transition="slide-in"}

:::: {.columns}

::: {.column width="50%"}
- Add a content in `README.md` file and `commit` the changes
:::

::: {.column width="50%"}
![](images/training-github-desktop-2nd-commit.png)
:::
::::

```{R}
#| echo: false

countdown_timer(2)
```

## Creating tags

Git has the ability to tag specific points in a repository’s history as being important. Typically, people use this functionality to mark release points (v1.0, v2.0 and so on).

```Shell
$ git tag -a v1.0.O -m "my version 1.0.0"
```


## `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#2472b5" transition="slide-in"}

:::: {.columns}

::: {.column width="50%"}
- Open the `README.md` file 
- Type `## Version v1.0.0`.
- Commit the changes

- Create a tag `v1.0.0` with right click the last commit
:::

::: {.column width="50%"}
![](images/training-github-desktop-3rd-commit.png)
:::
::::

```{R}
#| echo: false

countdown_timer(2)
```

## Ignoring files

It is possible to tell Git to ignore some files by using a `.gitignore` file.

A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected.

Example for `R` project

```R
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData
.RDataTmp

# User-specific files
.Ruserdata
```

## `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#2472b5" transition="slide-in"}

:::: {.columns}

::: {.column width="50%"}

- Create an empty `output.log` file
- Check the status in `GitHub Desktop`
- Now create a `.gitignore` file
  - write `*.log`. 
- The `output.log` file no longer appears as **Untracked**
- Commit with ”Fourth commit”

:::

::: {.column width="50%"}
![](images/training-github-desktop-4th-commit.png)
:::
::::

```{R}
#| echo: false

countdown_timer(3)
```

## Moving in the history

- `git checkout v1.0.0` → move to a tag

```{mermaid}
%%{init: {
  "theme": "base"
}}%%
gitGraph
    commit id: "25681b3"
    commit id: "fde1cd2"
    commit id: "9b0dce3"
    commit id: "017fc9d" tag: "v1.0.0" type: HIGHLIGHT
    commit id: "fe96d29"
```

- `git checkout fde1cd2` → move to the first commit

```{mermaid}
%%{init: {
  "theme": "base"
}}%%
gitGraph
    commit id: "25681b3"
    commit id: "fde1cd2" type: HIGHLIGHT
    commit id: "9b0dce3"
    commit id: "017fc9d" tag: "v1.0.0"
    commit id: "fe96d29"
```

- `git checkout main (master)` → move at the latest commit

```{mermaid}
%%{init: {
  "theme": "base"
}}%%
gitGraph
    commit id: "25681b3"
    commit id: "fde1cd2"
    commit id: "9b0dce3"
    commit id: "017fc9d" tag: "v1.0.0"
    commit id: "fe96d29" type: HIGHLIGHT
```
**N.B.** HEAD is a symbolic reference pointing to your location in history

## `r fontawesome::fa("laptop-code", "white")` Your Turn / Publishing on GitHub {background-color="#2472b5" transition="slide-in"}

- Open `Github Desktop` 
- Click on `Publish repository`
- View the repository on <https://www.github.com>
  - Go to `Repository` > `View on GitHub` 
  - Explore the `Repository`

![](images/training-github-desktop-publish.png)


```{R}
#| echo: false

countdown_timer(2)
```

## `r fontawesome::fa("laptop-code", "white")` Your Turn / Resolve a conflict {background-color="#2472b5" transition="slide-in"}

- On `GitHub`, add `x = 1` at the end of the `README.md` file.
- On your computer, edit the `README.md` and add `x = 2`.
- Open `Github Desktop` 
  - Add `README.md`
  - Commit **Fifth commit**
  - Push the commit


```{R}
#| echo: false

countdown_timer(3)
```

. . .

![](images/training-github-desktop-resolve.png)


## Resolve a conflict


- This is due to a diverging history that cannot be solved automatically by Git.

- `origin/main` corresponding to the version on the remote server

```{mermaid}
%%{init: {
  "theme": "base"
}}%%
gitGraph
    commit id: "25681b3"
    commit id: "fde1cd2"
    commit id: "9b0dce3"
    commit id: "017fc9d" tag: "v1.0.0"
    commit id: "fe96d29"
    branch origin/main
      commit id: "4ba5ab5"
    checkout main
    commit id: "5af862d"
```

## Resolve a conflict

If we open the `README.md` file, you should have

```
## Version v1.0.0.

<<<<<<< HEAD
x = 2
=======
x = 1
>>>>>>> 4ba5ab5f6ba79f7ac53d6bcf7ffc7e883ab469e2
```

*N.B.* These are conflicts markers. 

Git doesn’t know whether to chose `x = 1` or `x = 2`. **This is your job!!**


## `r fontawesome::fa("laptop-code", "white")` Your Turn / Resolve a conflict {background-color="#2472b5" transition="slide-in"}

- Edit the `README.md` and replace the 5 lines below by x = 3. 

```
<<<<<<< HEAD
x = 2
=======
x = 1
>>>>>>> 4ba5ab5f6ba79f7ac53d6bcf7ffc7e883ab469e2
```

- Commit and push the changes

```{R}
#| echo: false

countdown_timer(2)
```

```{mermaid}
%%{init: {
  "theme": "base"
}}%%
gitGraph
    commit id: "25681b3"
    commit id: "fde1cd2"
    commit id: "9b0dce3"
    commit id: "017fc9d" tag: "v1.0.0"
    commit id: "fe96d29"
    branch origin/main
      commit id: "4ba5ab5"
    checkout main
    commit id: "5af862d"
    merge origin/main
    commit id: "aad87f1"
```

## Good practices

- **Pull** before any work on the project
- **Commit** as frequently as possible
- Write explicit **commit message**
- **Push** regularly



# Training on collaborative project

## Collaborating on a project

- Write **together** an awesome book : *THE BEST BOOK*
- Repos : [fuzzy-octo-quarto-book](https://github.com/JulienLebranchu/fuzzy-octo-quarto-book)

- Each one will participate to write a chapter. 


## `r fontawesome::fa("laptop-code", "white")` Your Turn / Clone the repo {background-color="#2472b5" transition="slide-in"}

- Open `Github Desktop` 
- Clone `fuzzy-octo-quarto-book`, URL : `https://github.com/JulienLebranchu/fuzzy-octo-quarto-book`
- Change the current branch to `develop`
- Create a branch from `develop` with your section and your lastname, ie `it-gabriel`

```{R}
#| echo: false

countdown_timer(5)
```

## `r fontawesome::fa("laptop-code", "white")` Your Turn / Add a chapter {background-color="#2472b5" transition="slide-in"}

- Create a file name with the extension ".qmd" in the directory `it` or `stats`
- Add content by copy/pasting from the `resources.qmd` file
- Add your filename in the `_quarto.yml`

```
  chapters:
    - ...
    - part: stats.qmd
      chapters: 
      - stats/content.qmd
      - stats/XXX.qmd
    - part: it.qmd
      chapters: 
      - it/content.qmd
      - it/XXX.qmd
```

```{R}
#| echo: false

countdown_timer(5)
```

## `r fontawesome::fa("laptop-code", "white")` Your Turn  {background-color="#2472b5" transition="slide-in"}

- Add the change file to `index`
- Commit your changes to `local`
  - Remember, you must write an explicit message
- Push your changes on the remote repository
- Go on github and explore the repository
  - <https://github.com/JulienLebranchu/fuzzy-octo-quarto-book>


```{R}
#| echo: false

countdown_timer(2)
```

# Go further

## GitHub and RStudio

We need to link RStudio and GitHub to work togheter *without enter the identifier/password each time*.

::: {.columns}

::: {.column width="60%"}
```R
library(usethis)
usethis::create_github_token(description = "R-GITHUB-RSTUDIO")
```
- Fill the field "Expiration" with **No expiration**
- Click on **Generate token**
- Copy the token key : **ghp_XXXXXXXXXXXXXX** via {{< fa copy >}}

```R
library(gitcreds)
gitcreds_set()
```
- Paste the key

:::

::: {.column width="40%"}
![](images/training-github-pat.png)
:::

::::

