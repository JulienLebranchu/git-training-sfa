---
title: Git & GitHub training
subtitle: SFA team's training
format:
  farquhar-revealjs:
    width: 1600
    height: 900
    toc: true
    toc-depth: 1
    toc-title: Summary
    self-contained: false    
    preview-links: auto
    email-obfuscation: javascript
    chalkboard: 
      boardmarker-width: 3
author:
  - name: Julien LEBRANCHU
    orcid: 0000-0002-7759-0534
    email: julien.lebranchu@ird.fr
    institution: IRD/MARBEC/OB7 
date-modified: last-modified
date: 31 10 2023
filters:
  - d2
d2:
  layout: elk
  theme: "NeutralDefault"
  sketch: false
  pad: 20
---

# Presentation of the Git software

## What is Git ? 

![](images/git_logo.png){width=100}

- **Free** and **open source** software
- **Light** and **local use** (without internet)
- The most popular Version Control Software (**VCS**)
- **Manages** and **tracks versions** of a project (code, manuscript, data)
- Can be linked with **remote server** (GitHub, Gitlab)

::: {.notes}
:::

## What is Git for ?
### For a **single user**

- **Track changes** (*commits*) over time with information about **when** and **what** are the changes
- Eventually go **back in time**
- **Synchronize** the project in the **cloud** with git servers (GitHub, Gitlab)

## What is Git for ?
### For a **collaborative project**

- **Track changes** (*commits*) with information about **who**, **when** and **what** are the changes
- **Resolve version conflict** when simultaneous changes
- **Highlight a specific version** of the project (*tags*)
    - New version of a software
    - Submitted, revised versions of a paper
- Create **derivates** of a project (*branches*)
    - Production
    - Development
    - Feature
- **Publish** the project (open science)

## What is Git for ?
### Example of branches

:::: {.columns}

::: {.column width="50%"}
![](images/git-branches.png)
:::


::: {.column width="50%"}
![](images/git-flow.png)
:::
::::

# Presentation of GitHub

## What is GitHub Inc.? {scrollable=true}

![](images/github-mark.png){width=100} **GitHub** is a web-based hosting service for version control using **Git**. 

- Access to the control and collaboration features for every **project**.
- Work with public and private **repositories**.
- Develop a **networking**.
- Source of information.
- Allows to **host personal websites**
- **Continuous integration** using [GitHub Actions](https://docs.github.com/en/free-pro-team@latest/actions)

## Example: T3 repository
### Presentation of repository

![](images/github-t3-project-code.png)

## Example: T3 repository
### Issue interface

![](images/github-t3-project-issue.png)


## Example: T3 repository
### Branch interfaces

![](images/github-t3-project-branch.png)


## Example: T3 repository
### GitHub actions

```{.d2 height="200px"}
direction: right
user: User {shape: person}

github: main {
  shape: image
  icon: https://icons.terrastruct.com/dev/github.svg
}

github-pages: ob7-ird.github.io/t3 {
  shape: image
  icon: https://icons.terrastruct.com/dev/github.svg
}

github-action: Github actions {
  shape: image
  icon: images/github-actions.png
}

user -> github: changes

github -> github-action: Automatic build from main

github-action -> github-pages: Push to gh-pages branch and deploy
```

:::: {.columns}
::: {.column width="50%"}
![](images/github-t3-project-ci.png){width="500"}
:::

::: {.column width="50%"}
![](images/github-t3-project-deployment.png){width="500"}
:::
::::

# Go further in Git

## Git architecture

```{.d2 height="300px"}
direction: right
workspace.shape: cylinder
index.shape: cylinder
local.shape: cylinder

Workspace -> Index : git add

Index -> Local : git commit
```
- `Workspace`: your working directory $\rightarrow$ your computer
- `Local`: the local repository $\rightarrow$ contains the history of your project
- `Index` or `Stage`: a buffer between `Workspace` and `Local` $\rightarrow$ the list of files to be committed

Command:

- `add`: the command to add the file(s) to the list of tracked files
- `commit`: the command to validate a version

## Git architecture and command transport

```{.d2 height="400px"}
direction: right
workspace.shape: cylinder
index.shape: cylinder
local.shape: cylinder
remote.shape: cylinder

workspace -> local: commit -a
workspace -> index: add (-u)
index -> local: commit
local -> remote: push
local <- remote: fetch
workspace <- remote: pull or rebase

```

Command:

- `push`: Update remote refs along with associated objects
- `fetch`: Download objects and refs from another repository
- `rebase`: Reapply commits on top of another base tip
- `pull`: Fetch from and integrate with another repository or a local branch

<!-- ![](images/git-data-command-transport.jpeg) -->

## Good practices

- **Pull** before any work on the project
- **Commit** as frequently as possible
- Write explicit **commit message**
- **Push** regularly


# Training

## Installation and configuration
### Installing Git [**Windows and Mac**]

- Download and install Git from <https://git-scm.com/downloads>.
- Download and install GitHub Desktop from <https://desktop.github.com>.

## Installation and configuration
### Git configuration: register who your are

When done, open `Git Bash`, type

```
git config --global user.name "Firstname Lastname"

git config --global user.email "email@adress.org"
```

**N.B.** These two lines identify you in the history of a project.

```
git config --global --list
```

## Installation and configuration
### Git configuration with GitHub Desktop: register who your are

#. In the menu bar, select *GitHub Desktop*, then click **Preferences***.
#. In the *Preferences* window, click **Git**.

![](images/github-select-git-pane.png){width="500"}

More details on [Configuring and customizing GitHub Desktop]<https://docs.github.com/en/desktop/configuring-and-customizing-github-desktop/configuring-git-for-github-desktop>

## Getting started with Git in local {visibility="hidden"}


## Use of multiples projects derivates (branches) {visibility="hidden"}

# Go further {visibility="hidden"}

## Git clients (IDE) {visibility="hidden"}

## Working with large files {visibility="hidden"}

## Sources {visibility="uncounted"}

- UMR MARBEC : Support de formation <https://github.com/umr-marbec/git-training>
- UMR AMAP (Atelier MAIA P3M), Montpellier: Introduction à GIT (04/04/2019)
- Plateau bioinformatique, Montpellier: Formation Git(Lab) (05/04/2018)
- **For the bold:** the full Git documentation (506 pages!): <https://git-scm.com/book/en/v2>