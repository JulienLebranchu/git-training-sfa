---
title: Git & GitHub training
subtitle: Introduction to Git / GitHub
format:
  farquhar-revealjs:
    width: 1600
    height: 900
    toc: true
    toc-depth: 1
    toc-title: Summary
    self-contained: false    
    preview-links: auto
    email-obfuscation: javascript
    highlight-style: github
    chalkboard: 
      boardmarker-width: 3
author:
  - name: Julien LEBRANCHU
    orcid: 0000-0002-7759-0534
    email: julien.lebranchu@ird.fr
    institution: IRD/MARBEC/OB7 
date-modified: last-modified
date: 30 01 2024
filters:
  - d2
d2:
  layout: elk
  theme: "NeutralDefault"
  sketch: false
  pad: 20
---

# Presentation of the Git software

## What is Version Control Software (VCS)

### Git is Version Control Software

::: {.notes}
VCS is a software to track and manages changes in your project.

It's for all kind of projets:

- to develop a full software 
- to write an article or a report for a scientific journal or IOTC secreteriat
- to publish a website
...

VCS improves the following factors: 

- Collaboration 
- Storing Versions 
- Backup 
:::

Version control - also known as source control or revision control - is an software development practice for tracking and managing changes made to code and other files. 

VCS improves the following factors: 

- Collaboration 
- Storing Versions 
- Backup 


## What is Version Control Software (VCS)
### Centralised vs Distributed 

::: {.notes}
Two kind of CVS.

Until 2000, the most used was Centralised VCS.

Drawbacks of CVCS :

- It is not locally available, which means we must connect to the network to perform operations. 
- During the operations, if the central server gets crashed, there is a high chance of losing the data. 
- For every command, CVCS connects the central server which impacts speed of operation 


Benefits of DVCS:
​
- Except for pushing and pulling the code, the user can work offline in DVCS 
- DVCS is fast compared to CVCS because you don't have to contact the central server for every command 
- Merging and branching the changes in DVCS is very easy 
- Performance of DVCS is better 
- Even if the main server crashes, code will be stored in the local systems 

:::

![](images/centralizedVSdistributed.83b434d0.png){width="120%"}

## What is Git ? 

::: {.notes}
:::

![](images/git_logo.png){width=100}

- The most popular **Distributed** Version Control Software (**VCS**)
- Git was originally authored by **Linus Torvalds** in 2005 
- **Free** and **open source** software
- **Light** and **local use** (without the internet)
- **Manages** and **tracks versions** of a project (code, manuscript, data)
- Can be linked with **a remote server** (GitHub, Gitlab)


## What is Git for ?
### For a **single user**

- **Track changes** (*commits*) over time with information about **when** and **what** are the changes
- Eventually go **back in time**
- **Synchronise** the project in the **cloud** with git servers (GitHub, Gitlab)

::: {.notes}
It can be use for project with a single user.

For example, I use git and gitlab to write this training :

https://forge.ird.fr/marbec/ob7/training/git-training.git/

It will be easier if tomorrow someone from my team want collaborate on this project or if you want get the code for you, you will always have the last version.
:::

## What is Git for ?
### For a **collaborative project**

- **Track changes** (*commits*) with information about **who**, **when** and **what** are the changes
- **Resolve version conflict** when simultaneous changes
- **Highlight a specific version** of the project (*tags*)
    - A new version of a software
    - Submitted, revised versions of a paper
- Create **derivatives** of a project (*branches*): 
    - Main
    - Chapter-1
    - Chapter-2
    - Chapter-N
- **Publish** the project (open science)

::: {.notes}
:::

## What is Git for ?
### Example of branches

:::: {.columns}

::: {.column width="50%"}
![](images/git-branches.png)
:::


::: {.column width="50%"}
![](images/git-flow.png)
:::
::::

::: {.notes}
You can develop your own strategy inside a project.

Minimalist is to have two branches `main`and `develop`

More complex is the Git Flow strategy.

:::

# Presentation of GitHub

::: {.notes}

Now, we talk about GitHub, a web-based hosting service for version control using **Git**. 

:::

## What is GitHub Inc.? {scrollable=true}

![](images/github-mark.png){width=50} **GitHub** is a web-based hosting service for version control using **Git**. 

![](images/git-hub.png){width=60%}

::: {.notes}

GitHub host a git repository like on your laptop

:::

## What is GitHub Inc.? {scrollable=true}

![](images/github-mark.png){width=50} **GitHub** is a web-based hosting service for version control using **Git**. 

- Access to the control and collaboration features for every **project**.
- Work with public and private **repositories**.
- Develop **networking**.
- Source of information.
- Allows to **host personal websites**
- **Continuous integration** using [GitHub Actions](https://docs.github.com/en/free-pro-team@latest/actions)

## Example: T3 repository
### Presentation of repository

![](images/github-t3-project-code.png)

## Example: T3 repository
### Branch interfaces

![](images/github-t3-project-branch.png)

## Example: T3 repository
### Issue interface

![](images/github-t3-project-issue.png)



## Example: T3 repository
### GitHub actions

```{.d2 height="200px"}
direction: right
user: User {shape: person}

github: main {
  shape: image
  icon: https://icons.terrastruct.com/dev/github.svg
}

github-pages: ob7-ird.github.io/t3 {
  shape: image
  icon: https://icons.terrastruct.com/dev/github.svg
}

github-action: Github actions {
  shape: image
  icon: images/github-actions.png
}

user -> github: changes

github -> github-action: Automatic build from main

github-action -> github-pages: Push to gh-pages branch and deploy
```

:::: {.columns}
::: {.column width="50%"}
![](images/github-t3-project-ci.png){width="500"}
:::

::: {.column width="50%"}
![](images/github-t3-project-deployment.png){width="500"}
:::
::::

# Go further in Git

::: {.notes}
So I have present generalities about git and github, what is the difference between them.
Now,  let's talk about the heart of git and how it works.
:::

## Git architecture

```{.d2 height="300px"}
direction: right
workspace.shape: cylinder
index.shape: cylinder
local.shape: cylinder

Workspace -> Index : add

Index -> Local : commit
```
- `Workspace`: your working directory $\rightarrow$ your computer
- `Local`: the local repository $\rightarrow$ contains the history of your project
- `Index` or `Stage`: a buffer between `Workspace` and `Local` $\rightarrow$ the list of files to be committed

Command:

- `add`: the command to add the file(s) to the list of tracked files
- `commit`: the command to validate a version


## Git architecture

```{.d2 height="300px"}
direction: right
workspace.shape: cylinder
index.shape: cylinder
local.shape: cylinder
remote.shape: cylinder

Workspace -> Index
Index -> Local
Local -> Remote : push

```
- `Workspace`: your working directory $\rightarrow$ your computer
- `Local`: the local repository $\rightarrow$ contains the history of your project
- `Index` or `Stage`: a buffer between `Workspace` and `Local` $\rightarrow$ the list of files to be committed
- `Remote`: the remote directory $\rightarrow$ Source of truth (shared by all)

Command:

- `push`: Update remote refs along with associated objects


::: {.notes}
:::

## Git architecture and command transport

```{.d2 height="400px"}
direction: right
workspace.shape: cylinder
index.shape: cylinder
local.shape: cylinder
remote.shape: cylinder

workspace -> local: commit -a
workspace -> index: add (-u)
index -> local: commit
local -> remote: push
local <- remote: fetch
workspace <- remote: pull or rebase

```

Command:

- `push`: Update remote refs along with associated objects
- `fetch`: Download objects and refs from another repository
- `rebase`: Reapply commits on top of another base tip
- `pull`: Fetch from and integrate with another repository or a local branch

<!-- ![](images/git-data-command-transport.jpeg) -->

## Good practices

- **Pull** before any work on the project
- **Commit** as frequently as possible
- Write explicit **commit message**
- **Push** regularly


## R/Git/GitHub && Sources {visibility="uncounted"}

### Go further 

- **Happy Git and GitHub for the useR**
  - <https://happygitwithr.com>

### Sources

- UMR MARBEC : Support de formation 
  - <https://github.com/umr-marbec/git-training>
- UMR AMAP (Atelier MAIA P3M), Montpellier: Introduction à GIT (04/04/2019)
- Plateau bioinformatique, Montpellier: Formation Git(Lab) (05/04/2018)
- **For the bold:** the full Git documentation (506 pages!) 
  - <https://git-scm.com/book/en/v2>